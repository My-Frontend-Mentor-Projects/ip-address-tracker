{"version":3,"sources":["images/icon-arrow.svg","context.js","SearchAddress.js","images/icon-location.svg","MapView.js","AddressInfo.js","App.js","index.js"],"names":["AppContext","React","createContext","API_ENDPOINT","process","REACT_APP_API_KEY","AppProvider","children","useState","isLoading","setIsLoading","show","msg","error","setError","query","setQuery","addressData","setAddressData","fetchData","a","fetch","response","json","data","ip","newData","location","city","country","postalCode","timezone","isp","lat","lng","messages","useEffect","Provider","value","useGlobalContext","useContext","SearchAddress","searchValue","useRef","className","onSubmit","e","preventDefault","current","type","placeholder","ref","disabled","src","iconArrow","alt","customIcon","L","icon","iconUrl","IconLocation","iconRetinaUrl","MapView","position","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","Popup","AddressInfo","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a111f1bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nconst AppContext = React.createContext();\r\nconst API_ENDPOINT = `https://geo.ipify.org/api/v2/country,city?apiKey=${process.env.REACT_APP_API_KEY}`;\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState({ show: false, msg: \"\" });\r\n  const [query, setQuery] = useState(\"&ipAddress=8.8.8.8\");\r\n  const [addressData, setAddressData] = useState(null);\r\n\r\n  const fetchData = async (query) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_ENDPOINT}${query}`);\r\n      const data = await response.json();\r\n      if (!data.ip) {\r\n        setError({ show: true, msg: data.messages });\r\n      } else {\r\n        const newData = {\r\n          ip: data.ip,\r\n          location: `${data.location.city}, ${data.location.country} ${data.location.postalCode}`,\r\n          timezone: data.location.timezone,\r\n          isp: data.isp,\r\n          lat: data.location.lat,\r\n          lng: data.location.lng,\r\n        };\r\n        setAddressData(newData);\r\n        setError({ show: false, msg: \"\" });\r\n      }\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setError({\r\n        show: true,\r\n        msg: \"Something went wrong. Please try again later.\",\r\n      });\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(query);\r\n  }, [query]);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ addressData, isLoading, error, setQuery }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","import React, { useEffect } from \"react\";\r\nimport iconArrow from \"./images/icon-arrow.svg\";\r\nimport { useGlobalContext } from \"./context\";\r\n\r\nconst SearchAddress = () => {\r\n  const { isLoading, error, setQuery } = useGlobalContext();\r\n  const searchValue = React.useRef(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setQuery(`&domain=${searchValue.current.value}`);\r\n    searchValue.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-address\">\r\n      <h1>IP Address Tracker</h1>\r\n      <form className=\"search-address-form\" onSubmit={handleSubmit}>\r\n        {error.show && <div className=\"error\">{error.msg}</div>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for any IP address or domain\"\r\n          ref={searchValue}\r\n        />\r\n        <button\r\n          className=\"btn\"\r\n          type=\"submit\"\r\n          disabled={isLoading ? \"disabled\" : null}\r\n        >\r\n          <img src={iconArrow} alt=\"arrow\" />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchAddress;\r\n","export default __webpack_public_path__ + \"static/media/icon-location.7e6459d2.svg\";","import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport IconLocation from \"./images/icon-location.svg\";\r\nimport { useGlobalContext } from \"./context\";\r\n\r\nconst customIcon = L.icon({\r\n  iconUrl: IconLocation,\r\n  iconRetinaUrl: IconLocation,\r\n});\r\n\r\nconst MapView = () => {\r\n  let position = [37.38605, -122.08385];\r\n  const { addressData } = useGlobalContext();\r\n\r\n  if (addressData) {\r\n    position = [addressData.lat, addressData.lng];\r\n  }\r\n\r\n  return (\r\n    <MapContainer center={position} zoom={13} scrollWheelZoom={false}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <Marker position={position} icon={customIcon}>\r\n        <Popup>\r\n          A pretty CSS3 popup. <br /> Easily customizable.\r\n        </Popup>\r\n      </Marker>\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n","import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport MapView from \"./MapView\";\r\n\r\nconst AddressInfo = () => {\r\n  const { isLoading, addressData, error } = useGlobalContext();\r\n\r\n  if (isLoading) {\r\n    return <div className=\"loading\"></div>;\r\n  }\r\n\r\n  if (error.show) {\r\n    return (\r\n      <div className=\"location\">\r\n        <article>\r\n          <h4 className=\"item-title\">ip address</h4>\r\n          <span className=\"item-value\">-</span>\r\n        </article>\r\n        <article>\r\n          <h4 className=\"item-title\">location</h4>\r\n          <span className=\"item-value\">-</span>\r\n        </article>\r\n        <article>\r\n          <h4 className=\"item-title\">timezone</h4>\r\n          <span className=\"item-value\">-</span>\r\n        </article>\r\n        <article>\r\n          <h4 className=\"item-title\">ISP</h4>\r\n          <span className=\"item-value\">-</span>\r\n        </article>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"location\">\r\n        <article>\r\n          <h4 className=\"item-title\">ip address</h4>\r\n          <span className=\"item-value\">{addressData.ip}</span>\r\n        </article>\r\n        <article>\r\n          <h4 className=\"item-title\">location</h4>\r\n          <span className=\"item-value\">{addressData.location}</span>\r\n        </article>\r\n        <article>\r\n          <h4 className=\"item-title\">timezone</h4>\r\n          <span className=\"item-value\">UTC {addressData.timezone}</span>\r\n        </article>\r\n        <article>\r\n          <h4 className=\"item-title\">ISP</h4>\r\n          <span className=\"item-value\">{addressData.isp}</span>\r\n        </article>\r\n      </div>\r\n      <MapView />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddressInfo;\r\n","import React from \"react\";\r\nimport SearchAddress from \"./SearchAddress\";\r\nimport AddressInfo from \"./AddressInfo\";\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <SearchAddress />\r\n      <AddressInfo />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}